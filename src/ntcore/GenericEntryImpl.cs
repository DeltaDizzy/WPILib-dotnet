// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

// THIS FILE WAS AUTO-GENERATED BY ./ntcore/generate_topics.py. DO NOT MODIFY

using System;
using NetworkTables.Handles;
using NetworkTables.Natives;

namespace NetworkTables;

/** NetworkTables generic implementation. */
internal sealed partial class GenericEntryImpl<THandle> : EntryBase<THandle>, IGenericEntry where THandle : struct, INtEntryHandle
{
    /**
 * Constructor.
 *
 * @param topic Topic
 * @param handle Native handle
 */
    internal GenericEntryImpl(Topic topic, THandle handle) : base(handle)
    {
        Topic = topic;
    }

    public override Topic Topic { get; }

    public NetworkTableValue Get()
    {
        return NtCore.GetEntryValue(Handle);
    }

    public NetworkTableValue[] ReadQueue()
    {
        return NtCore.ReadQueueValue(Handle);
    }

    public bool Set(in RefNetworkTableValue value)
    {
        return NtCore.SetEntryValue(Handle, value);
    }

    /**
     * Sets the entry's value.
     *
     * @param value the value that will be assigned
     * @return False if the table key already exists with a different type
     * @throws IllegalArgumentException if the value is not a known type
     */

    public bool SetValue<T>(T value)
    {
        return SetValue(0, value);
    }

    public bool SetValue<T>(long time, T value)
    {
        return value switch
        {
            NetworkTableValue v => Set(v),
            bool v => Set(RefNetworkTableValue.MakeBoolean(time, v)),
            double v => Set(RefNetworkTableValue.MakeDouble(time, v)),
            float v => Set(RefNetworkTableValue.MakeFloat(time, v)),
            string v => Set(RefNetworkTableValue.MakeString(time, v)),
            bool[] v => Set(RefNetworkTableValue.MakeBooleanArray(time, v)),
            double[] v => Set(RefNetworkTableValue.MakeDoubleArray(time, v)),
            float[] v => Set(RefNetworkTableValue.MakeFloatArray(time, v)),
            string[] v => Set(RefNetworkTableValue.MakeStringArray(time, v)),
            byte[] v => Set(RefNetworkTableValue.MakeRaw(time, v)),
            _ => throw new InvalidOperationException($"Value of type {value?.GetType().Name} cannot be put into a table")
        };
    }

    public bool SetDefault(in RefNetworkTableValue value)
    {
        return NtCore.SetDefaultEntryValue(Handle, value);
    }

    public bool SetDefaultValue<T>(T value)
    {
        return value switch
        {
            NetworkTableValue v => Set(v),
            bool v => SetDefault(RefNetworkTableValue.MakeBoolean(v)),
            double v => SetDefault(RefNetworkTableValue.MakeDouble(v)),
            float v => SetDefault(RefNetworkTableValue.MakeFloat(v)),
            string v => SetDefault(RefNetworkTableValue.MakeString(v)),
            bool[] v => SetDefault(RefNetworkTableValue.MakeBooleanArray(v)),
            double[] v => SetDefault(RefNetworkTableValue.MakeDoubleArray(v)),
            float[] v => SetDefault(RefNetworkTableValue.MakeFloatArray(v)),
            string[] v => SetDefault(RefNetworkTableValue.MakeStringArray(v)),
            byte[] v => SetDefault(RefNetworkTableValue.MakeRaw(v)),
            _ => throw new InvalidOperationException($"Value of type {value?.GetType().Name} cannot be put into a table")
        };
    }
}
